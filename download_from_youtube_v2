#!/usr/bin/env python3
import os
import sys
import subprocess
import json
from pathlib import Path
from datetime import datetime

class YouTubeDownloader:
    def __init__(self):
        self.output_dir = Path("downloads")
        self.output_dir.mkdir(exist_ok=True)
        
    def log(self, message, level="INFO"):
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] {level}: {message}")
        
    def check_dependencies(self):
        """Verifica se yt-dlp e ffmpeg est√£o instalados"""
        deps = ["yt-dlp", "ffmpeg"]
        missing = []
        
        for dep in deps:
            try:
                subprocess.run([dep, "--version"], 
                             capture_output=True, check=True)
            except (subprocess.CalledProcessError, FileNotFoundError):
                missing.append(dep)
                
        if missing:
            self.log(f"Depend√™ncias faltando: {', '.join(missing)}", "ERROR")
            self.log("Instale com: pip install yt-dlp && apt install ffmpeg", "INFO")
            return False
        return True
        
    def get_video_info(self, url):
        """Obt√©m informa√ß√µes do v√≠deo"""
        try:
            cmd = ["yt-dlp", "--dump-json", "--no-playlist", url]
            result = subprocess.run(cmd, capture_output=True, text=True, check=True)
            return json.loads(result.stdout)
        except subprocess.CalledProcessError:
            self.log("Erro ao obter informa√ß√µes do v√≠deo", "ERROR")
            return None
            
    def sanitize_filename(self, filename):
        """Remove caracteres inv√°lidos do nome do arquivo"""
        invalid_chars = '<>:"/\\|?*'
        for char in invalid_chars:
            filename = filename.replace(char, "_")
        return filename[:200]  # Limita tamanho
        
    def download_audio_mp3(self, url, info):
        """Download em MP3 com normaliza√ß√£o"""
        title = self.sanitize_filename(info['title'])
        output_path = self.output_dir / f"{title}.mp3"
        
        self.log(f"Baixando √°udio MP3: {title}")
        
        cmd = [
            "yt-dlp",
            "--extract-audio",
            "--audio-format", "mp3",
            "--audio-quality", "192K",
            "--postprocessor-args", 
            "ffmpeg:-af loudnorm=I=-16:TP=-1.5:LRA=11 -c:a libmp3lame -b:a 192k",
            "--output", str(output_path.with_suffix('.%(ext)s')),
            url
        ]
        
        return self._execute_download(cmd, output_path)
        
    def download_audio_mp4(self, url, info):
        """Download em MP4 √°udio (AAC) para carros"""
        title = self.sanitize_filename(info['title'])
        output_path = self.output_dir / f"{title}_audio.mp4"
        
        self.log(f"Baixando √°udio MP4/AAC: {title}")
        
        cmd = [
            "yt-dlp",
            "--format", "bestaudio[ext=m4a]/best[height<=720]",
            "--postprocessor-args", 
            "ffmpeg:-af loudnorm=I=-16:TP=-1.5:LRA=11 -c:a aac -b:a 128k -movflags +faststart",
            "--output", str(output_path.with_suffix('.%(ext)s')),
            url
        ]
        
        return self._execute_download(cmd, output_path)
        
    def download_video_720p(self, url, info):
        """Download v√≠deo 720p compat√≠vel com carros com sincroniza√ß√£o garantida"""
        title = self.sanitize_filename(info['title'])
        output_path = self.output_dir / f"{title}_720p.mp4"
        
        self.log(f"Verificando formatos dispon√≠veis para: {title}")
        
        # Estrat√©gia de fallback para qualidade de v√≠deo
        format_strategies = [
            # Primeira tentativa: H.264 720p nativo
            "best[vcodec^=avc1][height=720][ext=mp4]/best[vcodec=h264][height=720][ext=mp4]",
            # Segunda tentativa: qualquer 720p MP4
            "best[height=720][ext=mp4]",
            # Terceira tentativa: at√© 720p (pode ser menor)
            "best[height<=720][ext=mp4]",
            # √öltima tentativa: melhor dispon√≠vel at√© 720p
            "best[height<=720]"
        ]
        
        for i, format_selector in enumerate(format_strategies, 1):
            self.log(f"Tentativa {i}: {format_selector}")
            
            cmd = [
                "yt-dlp",
                "--format", format_selector,
                "--postprocessor-args", 
                "ffmpeg:-af loudnorm=I=-16:TP=-1.5:LRA=11 -c:v libx264 -preset medium -crf 23 -c:a aac -b:a 128k -movflags +faststart -async 1 -vsync 1",
                "--output", str(output_path.with_suffix('.%(ext)s')),
                url
            ]
            
            # Testa se o formato existe antes de baixar
            test_cmd = ["yt-dlp", "--format", format_selector, "--simulate", url]
            try:
                result = subprocess.run(test_cmd, capture_output=True, text=True, check=True)
                if result.returncode == 0:
                    self.log(f"Formato encontrado: {format_selector}", "SUCCESS")
                    # Executa download com sincroniza√ß√£o for√ßada
                    return self._execute_download_with_sync(cmd, output_path, format_selector)
            except subprocess.CalledProcessError:
                self.log(f"Formato n√£o dispon√≠vel: {format_selector}", "WARNING")
                continue
                
        self.log("Nenhum formato adequado encontrado", "ERROR")
        return None
        
    def _execute_download_with_sync(self, cmd, expected_path, format_used):
        """Executa download com verifica√ß√£o de sincroniza√ß√£o A/V"""
        try:
            process = subprocess.Popen(
                cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, 
                text=True, universal_newlines=True
            )
            
            for line in process.stdout:
                if "%" in line or "ETA" in line:
                    print(f"\r{line.strip()}", end="", flush=True)
                elif "async" in line.lower() or "sync" in line.lower():
                    self.log(f"Sincroniza√ß√£o: {line.strip()}", "SYNC")
                elif line.strip():
                    self.log(line.strip(), "DOWNLOAD")
                    
            process.wait()
            print()  # Nova linha ap√≥s progresso
            
            if process.returncode == 0:
                # Verifica se arquivo foi criado
                found_files = list(self.output_dir.glob(f"{expected_path.stem}.*"))
                if found_files:
                    actual_file = found_files[0]
                    
                    # Verifica sincroniza√ß√£o A/V do arquivo final
                    if self._verify_av_sync(actual_file):
                        self.log(f"Download conclu√≠do com A/V sincronizado: {actual_file.name}", "SUCCESS")
                        self.log(f"Formato usado: {format_used}", "INFO")
                        return str(actual_file)
                    else:
                        self.log("Problema de sincroniza√ß√£o detectado, reprocessando...", "WARNING")
                        return self._fix_av_sync(actual_file)
                else:
                    self.log("Arquivo n√£o encontrado ap√≥s download", "WARNING")
                    return None
            else:
                self.log("Falha no download", "ERROR")
                return None
                
        except Exception as e:
            self.log(f"Erro durante download: {e}", "ERROR")
            return None
            
    def _verify_av_sync(self, file_path):
        """Verifica se √°udio e v√≠deo est√£o sincronizados"""
        try:
            cmd = [
                "ffmpeg", "-i", str(file_path), "-t", "1", "-f", "null", "-"
            ]
            result = subprocess.run(cmd, capture_output=True, text=True)
            
            # Procura por warnings de sincroniza√ß√£o no stderr
            stderr_text = result.stderr.lower()
            sync_issues = ["audio drift", "non monotonic", "discontinuity", "pts"]
            
            for issue in sync_issues:
                if issue in stderr_text:
                    self.log(f"Problema de sincroniza√ß√£o detectado: {issue}", "WARNING")
                    return False
                    
            return True
            
        except Exception as e:
            self.log(f"Erro ao verificar sincroniza√ß√£o: {e}", "WARNING")
            return True  # Assume OK se n√£o conseguir verificar
            
    def _fix_av_sync(self, file_path):
        """Corrige problemas de sincroniza√ß√£o A/V"""
        try:
            fixed_path = file_path.with_stem(f"{file_path.stem}_fixed")
            
            self.log("Corrigindo sincroniza√ß√£o A/V...")
            
            cmd = [
                "ffmpeg", "-i", str(file_path),
                "-c:v", "libx264", "-preset", "medium", "-crf", "23",
                "-c:a", "aac", "-b:a", "128k",
                "-af", "loudnorm=I=-16:TP=-1.5:LRA=11",
                "-async", "1", "-vsync", "1",
                "-movflags", "+faststart",
                "-y", str(fixed_path)
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True)
            
            if result.returncode == 0 and fixed_path.exists():
                # Remove arquivo original e renomeia o corrigido
                file_path.unlink()
                fixed_path.rename(file_path)
                self.log("Sincroniza√ß√£o A/V corrigida", "SUCCESS")
                return str(file_path)
            else:
                self.log("Falha ao corrigir sincroniza√ß√£o", "ERROR")
                return str(file_path)  # Retorna original mesmo com problemas
                
        except Exception as e:
            self.log(f"Erro ao corrigir sincroniza√ß√£o: {e}", "ERROR")
            return str(file_path)
            
    def show_menu(self):
        """Interface do usu√°rio"""
        print("\n" + "="*50)
        print("üéµ YOUTUBE DOWNLOADER")
        print("="*50)
        print("1. √Åudio MP3 (192kbps, normalizado)")
        print("2. √Åudio MP4/AAC (128kbps, para carros)")
        print("3. V√≠deo 720p MP4 (compat√≠vel carros)")
        print("4. Sair")
        print("-"*50)
        
    def run(self):
        """Loop principal"""
        if not self.check_dependencies():
            return
            
        self.log("YouTube Downloader iniciado")
        self.log(f"Diret√≥rio de sa√≠da: {self.output_dir.absolute()}")
        
        while True:
            self.show_menu()
            
            try:
                choice = input("Escolha uma op√ß√£o (1-4): ").strip()
                
                if choice == "4":
                    self.log("Programa encerrado")
                    break
                    
                if choice not in ["1", "2", "3"]:
                    self.log("Op√ß√£o inv√°lida", "WARNING")
                    continue
                    
                url = input("Digite a URL do YouTube: ").strip()
                if not url:
                    self.log("URL n√£o pode estar vazia", "WARNING")
                    continue
                    
                self.log("Obtendo informa√ß√µes do v√≠deo...")
                info = self.get_video_info(url)
                
                if not info:
                    self.log("N√£o foi poss√≠vel obter informa√ß√µes do v√≠deo", "ERROR")
                    continue
                    
                self.log(f"T√≠tulo: {info['title']}")
                self.log(f"Dura√ß√£o: {info.get('duration', 'N/A')}s")
                self.log(f"Canal: {info.get('uploader', 'N/A')}")
                
                # Executa download baseado na escolha
                if choice == "1":
                    result = self.download_audio_mp3(url, info)
                elif choice == "2":
                    result = self.download_audio_mp4(url, info)
                elif choice == "3":
                    result = self.download_video_720p(url, info)
                    
                if result:
                    self.log(f"Arquivo salvo em: {result}", "SUCCESS")
                else:
                    self.log("Download falhou", "ERROR")
                    
                print("\n" + "-"*50)
                
            except KeyboardInterrupt:
                self.log("\nPrograma interrompido pelo usu√°rio")
                break
            except Exception as e:
                self.log(f"Erro inesperado: {e}", "ERROR")

if __name__ == "__main__":
    downloader = YouTubeDownloader()
    downloader.run()
